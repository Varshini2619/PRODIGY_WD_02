<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stopwatch with Gradient Progress Ring & Sparkling Stars</title>
    <style>
        body, html {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background: linear-gradient(180deg, #1A1A1D, #3B1C32, #6A1E55, #A64D79);
            overflow: hidden;
            color: white;
        }

        .star {
            position: absolute;
            width: 3px;
            height: 3px;
            background-color: white;
            border-radius: 50%;
            opacity: 0;
            animation: sparkle 2s infinite ease-in-out;
        }

        @keyframes sparkle {
            0%, 100% { opacity: 0; }
            50% { opacity: 1; transform: scale(1.5); }
        }

        #timeContainer {
            position: relative;
            width: 200px;
            height: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .progress-ring circle {
            fill: transparent;
            stroke-width: 8;
            stroke-dasharray: 628;
            stroke-dashoffset: 628;
            transition: stroke-dashoffset 0.1s linear;
        }

        .progress-ring-gradient {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(180deg, #1D1A1A, #1C3B26, #1E6A4B, #4DA68B);
            mask: url(#progress-mask);
            -webkit-mask: url(#progress-mask);
        }

        #laps {
            margin-top: 20px;
            width: 200px;
            text-align: center;
            background: linear-gradient(180deg, #1D1A1A, #1C3B26, #1E6A4B, #4DA68B);
        }
    
        .lap-time {
            font-size: 1em;
            border-bottom: 1px solid white;
            padding: 5px;
            font-weight: bold;
        }

        #timeDisplay {
            font-size: 2.5em;
            color: whitesmoke;
            text-shadow: 0 0 8px rgba(255, 255, 255, 0.8);
            position: absolute;
        }

        .buttons {
            margin-top: 20px;
            display: flex;
            justify-content: center;
            gap: 10px;
            flex-wrap: wrap;
        }

        .button {
            background: linear-gradient(180deg, #1D1A1A, #1C3B26, #1E6A4B, #4DA68B);
            box-shadow: 0 4px 10px rgba(59, 28, 50, 0.5);
            padding: 10px 20px;
            border: none;
            font-size: 1em;
            cursor: pointer;
            border-radius: 8px;
            color: white;
        }

        h1{
            font-size: 30px;
            font-family: italic;
            color: #c0c0c0;
            text-shadow:
                0 0 5px black,
                0 0 10px black,
                0 0 15px black,
                0 0 20px black,
                0 0 25px black,
                0 0 30px black;
            animation: sparkle 1.5s infinite alternate;
        }
        
    </style>
</head>
<body>
    <h1>STOPWATCH⏱️</h1>
    <div id="star-container"></div>

    <div id="timeContainer">
        
        <svg width="200" height="200" class="progress-ring">
            <defs>
                <mask id="progress-mask">
                    <circle cx="100" cy="100" r="96" stroke="white" stroke-width="8" fill="transparent"></circle>
                </mask>
            </defs>
            <circle cx="100" cy="100" r="96" stroke="#B0E0E6" stroke-width="8"></circle>
        </svg>
        <div class="progress-ring-gradient"></div>
        <div id="timeDisplay">00:00:00</div>
    </div>

    <div class="buttons">
        <button class="button" onclick="startStopwatch()">Start</button>
        <button class="button" onclick="pauseStopwatch()">Pause</button>
        <button class="button" onclick="stopStopwatch()">Stop</button>
        <button class="button" onclick="recordLap()">Lap</button>
    </div>

    <div id="laps"></div>

    <script>
        let stopwatchInterval;
        let elapsedTime = 0;
        let running = false;
        const circumference = 2 * Math.PI * 96;
        const progressCircle = document.querySelector('.progress-ring circle');

        function startStopwatch() {
            if (!running) {
                running = true;
                stopwatchInterval = setInterval(() => {
                    elapsedTime += 10;
                    updateDisplay();
                    updateProgress();
                }, 10);
            }
        }

        function pauseStopwatch() {
            if (running) {
                running = false;
                clearInterval(stopwatchInterval);
            }
        }

        function stopStopwatch() {
            running = false;
            clearInterval(stopwatchInterval);
            elapsedTime = 0;
            updateDisplay();
            updateProgress();
            document.getElementById("laps").innerHTML = "";
        }

        function recordLap() {
            if (running) {
                const lapTime = formatTime(elapsedTime);
                const lapDiv = document.createElement("div");
                lapDiv.className = "lap-time";
                lapDiv.innerText = `Lap: ${lapTime}`;
                document.getElementById("laps").appendChild(lapDiv);
            }
        }

        function updateDisplay() {
            document.getElementById("timeDisplay").innerText = formatTime(elapsedTime);
        }

        function formatTime(time) {
            let milliseconds = Math.floor((time % 1000) / 10);
            let seconds = Math.floor((time / 1000) % 60);
            let minutes = Math.floor((time / (1000 * 60)) % 60);
            let hours = Math.floor((time / (1000 * 60 * 60)) % 24);

            return (
                (hours < 10 ? "0" + hours : hours) + ":" +
                (minutes < 10 ? "0" + minutes : minutes) + ":" +
                (seconds < 10 ? "0" + seconds : seconds) + "." +
                (milliseconds < 10 ? "0" + milliseconds : milliseconds)
            );
        }

        function updateProgress() {
            const offset = circumference - (elapsedTime / 60000) * circumference;
            progressCircle.style.strokeDashoffset = offset;
        }

        const numStars = 100;
        const starContainer = document.getElementById("star-container");

        for (let i = 0; i < numStars; i++) {
            const star = document.createElement("div");
            star.classList.add("star");
            star.style.top = `${Math.random() * 100}vh`;
            star.style.left = `${Math.random() * 100}vw`;
            star.style.animationDelay = `${Math.random() * 2}s`;
            starContainer.appendChild(star);
        }
    </script>
</body>
</html>

